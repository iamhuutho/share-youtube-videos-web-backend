quit
!current_user.id
Notification.select(:id, :user_id, :title, :message).where(user_id: !current_user.id)
@notifications
c
user_id
@notifications = Notification.select(:id, :user_id, :title, :message).where(user_id: !current_user.id)
c
params
c
current_user
c
@notification.save
c
current_user.notification.new(notification_params)
current_user.notification
current_user.notification.new(notification_params)
quit
current_user.notification.new(notification_params)
quit
Notification
current_user
current_user.notifications.new(notification_params)
current_user.notification.new(notification_params)
c
current_user.notification.new(notification_params)
current_user.notification
quit
current_user
Notification.new(notification_params)
c
quit
Notification.select(:id, :user_id, :title, :message)
notification
c
quit
notification
c
noti_hist_element
c
NotificationHistory.find_by(notification_id: notification.id, user_id: user)
NotificationHistory
quit
ActiveRecord::Base.connection.tables
notification_history
Notificationhistory
Notification_History
Notification
NotificationHistory
NotificationHistories
NotificationHistory
notification.id
user_id
c
NotificationHistory.find_by(notification_id: notification.id, user_id: user_id)
c
notification.notification_history.all
notification.notification_history
notification
user_id
c
notification.notification_history
notification
notification.notification_history.exists?
notification.notification_history.exist?
notification.notification_history.exist
notification.notification_history
params
notification
c
Notification.select(:id, :title, :message)c
Notification.select(:id, :title, :message)
c
video.increment!(:likes)
video
params
c
params
current_user
c
current_user.user_sessions.last
current_user.user_sessions
current_user
session
quit
notifications_response
json: notifications_response
notifications_response
c
@notifications
current_user.notification
@notification
json: @notification
c
current_user.notification
quit
c
params
current_user
c
current_user
video
c
@url.match(pattern)[:video_id]
@url.match(pattern)
c
@url.match(pattern)
@url
c
@url
@url.match(pattern)
c
ActionCable.server.broadcast 'video_channel', video: video.title, author: current_user.username
c
video.save
video
current_user.videos.new(video_params)
current_user.videos.new(videos_params)
current_user.videos
current_user.video
current_user.user_sessions
current_user
video.save
video
c
current_user.user_sessions.last
current_user.user_sessions.class
current_user.user_sessions
current_user.user_session
current_user
c
current_user
current_user.user_sessions
current_user.user_session
current_user
c
quit
user
user.id
session.save
session
c
session
UserSession.create(users_id: user.id, session_token: SecureRandom.hex(10), expires_at: 30.minutes.from_now)
c
UserSession.create(users_id: user.id, session_token: SecureRandom.hex(10), expires_at: 30.minutes.from_now)
UserSession
c
params
c
session
c
session.save
session
c
Sessionc
Sesssion
Session
c
current_user.new(video_params)
current_user
current_use
c
current_user
c
@session
session
c
session[:user_id]
current_user
c
params[:user]
params[:username]
User.find_all
user
c
params.require(:user).permit(:username, :password)
params.require(:user)
 v
c
params.require(:user).permit(:username, :password)
params["user"]
params.user
params.users
params
user
c
params.user
params
user
c
user
params.params
params.username
params.usernam
params
params.user
params.users
params
params.require(:user).permit(:username, :password)
params
